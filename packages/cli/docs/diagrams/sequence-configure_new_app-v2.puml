@startuml
'https://plantuml.com/sequence-diagram

autonumber

' need mechanism to figure out which services need to be updated if a given global parameter is updated
title sequence diagram - cenv app implementation
actor ServiceDeveloper

ServiceDeveloper -> localDrive: developer downloads \nsource via github
ServiceDeveloper -> cenv: 'cenv init' in the root directory \nof a the "@stoked-cenv\backend-api", the \nservice being integrated with cenv
cenv -> Lambda_Materialization: Create Lambda to \nmaterialize cenv \nConfiguration Profiles \n(if not pre-existing in \nenvironment)
cenv -> SNS_Invalidation_Topic: Create SNS topic to \ndeliver deploy complete \nnotifications to any lambda's \ndepending on the application's \nconfiguration profile \n(if not pre-existing in \nenvironment)
cenv -> Lambda_Invalidation: Create Lambda to \ninvalidate Lambda \nfunctions that depend \non the service configuration \nvariables for this service (if not pre-existing in environment)
cenv -> AppConfig_App_BackendApi: Create AppConfig Application "@stoked-cenv\backend-api"
cenv -> AppConfig_App_BackendApi: Create AppConfig Environment "local" for the "@stoked-cenv\backend-api" \nApplication
cenv -> AppConfig_App_BackendApi: Create AppConfig cenv Configuration Profile  "config" for the "@stoked-cenv\backend-api" \nApplication

ServiceDeveloper -> cenv: 'cenv add -e baseUrl localhost:9196'
cenv -> ParameterStore: Create parameter "/service/ec/backend-api/environment/local/port"\n with value "localhost:9196"

ServiceDeveloper -> cenv: 'cenv add -g googleGeocodeApiKey'
cenv -> ParameterStore: Adds a reference to an already existing global \nparameter (if it exists) located here: "/global/google/geocode/apiKey" by adding\n the path to the global link parameter for this service here: "/services/backend-api/global""

ServiceDeveloper -> cenv: 'cenv deploy'
cenv -> Lambda_Materialization: Executes the materialization \nlambda given the AppConfig \nidentifiers for \n"@stoked-cenv\backend-api" created \n  during the "cenv init"
Lambda_Materialization -> AppConfig_App_BackendApi: Generate a materialized yaml file containing all \nthe environment variables for this service
Lambda_Materialization -> Lambda_Invalidation: Invokes the Lambda_Invalidation function
Lambda_Invalidation -> Lambda_Dependent_Service_Config: Invalidates the lambda's that match the specific service tag by \nupdating a dummy environment variable with the latest timestamp
ECS_BackendApi_Service -> AppConfig_App_BackendApi: Backend api polls for a new configuration update and receives the latest

@enduml
